"""
    wingpo(wing, rclt, rcls, N, W, Lhtail)

Computes wing root ("center") loading ``p_o`` to balance the net load.

```math
N*W - L_{h tail} \times 2*âˆ«p(Î·) dy + 2Î”Lâ‚€ + 2Î”Lâ‚œ = N*W - (L_{htail}).
```

!!! details "ðŸ”ƒ Inputs and Outputs"
    **Inputs:**
    - `wing::TASOPT.structures.wing`: Wing structure.
    - `rclt::Float64`: .
    - `rcls::Float64`: .
    - `N::Float64`: 
    - `W::Float64`: 
    - `Lhtail::Float64`: 

    **Outputs:**
    - `po::Float64`: Wing root loading magnitude.

See Section 2.6.2 of the [TASOPT Technical Desc](@ref dreladocs).
"""
function wingpo(wing, rclt, rcls, N, W, Lhtail)

    Î³t, Î³s = wing.outboard.Î» * rclt, wing.inboard.Î» * rcls

    Î·o, Î·s = wing.layout.Î·o, wing.layout.Î·s

    Kc =
        Î·o +
        0.5 * (1.0 + wing.inboard.Î») * (Î·s - Î·o) +
        0.5 * (wing.inboard.Î» + wing.outboard.Î») * (1.0 - Î·s)

    Ko = 1.0 / (wing.layout.AR * Kc)

    Kp =
        Î·o +
        0.5 * (1.0 + Î³s) * (Î·s - Î·o) +
        0.5 * (Î³s + Î³t) * (1.0 - Î·s) +
        wing.fuse_lift_carryover * Î·o +
        2.0 * wing.tip_lift_loss * Ko * Î³t * wing.outboard.Î»

    po = (N * W - Lhtail) / (Kp * wing.layout.span)

    return po
end # wingpo

"""
    tailpo!(tail,S,qne; t_fac = 1.0)

Calculates stabilizer span, root chord, and root loading based on the 
never-exceed dynamic pressure, maximum CL, sweep, and aspect ratio.

!!! details "ðŸ”ƒ Inputs and Outputs"
    **Inputs:**
    - `tail::TASOPT.structures.tail`: Tail structure.
    - `S::Float64`: Stabilizer area.
    - `qne::Float64`: Never-exceed dynamic pressure.
    - `t_fac::Float64`: Tail Factor (1 for Htail/Wing, 2 for Vtail).
    
    **Outputs:**
    - `po::Float64`: Stabilizer root loading.
    - `b::Float64`: Stabilizer wingspan.

See [Geometry](@ref geometry) or Section 2.3.2 and 2.9.6 of the [TASOPT Technical Description](@ref dreladocs).
"""
function tailpo!(tail, S, qne; t_fac = 1.0)

    b  = sqrt(S*tail.layout.AR*t_fac)
    tail.layout.root_chord = S/(0.5*b*(1.0+tail.outboard.Î»))
    po = qne*S*tail.CL_max/b * 2.0/(1.0 + tail.outboard.Î»)
    tail.outboard.co = tail.layout.root_chord*tail.inboard.Î»
    tail.inboard.co = tail.layout.root_chord
    return po,b
end

"""
    wingcl(wing, gammat, gammas,
            CL, CLhtail,
	        fduo, fdus, fdut)

Calculates section cl at  eta = Î·o,Î·s,1

!!! details "ðŸ”ƒ Inputs and Outputs"
    **Inputs:**
    - `Wing::TASOPT.Wing`: Wing Structure
    - `Î³t::Float64`, `Î³s::Float64`: Wing lift distribution "taper" ratios for outer and inner wing sections, respectively.
    - `CL::Float64`, `CLhtail::Float64`: Overall lift coefficient of wing and horizontal tail, respectively.
    - `duo::Float64`, `dus::Float64`, `dut::Float64`: Velocity-change fractions at wing root, break ("snag"), and tip due to fuselage flow.

    **Outputs:**
    - `clo::Float64`, `cls::Float64`, `clt::Float64`: Section lift coefficient at root, wing break ("snag"), and tip.

See Sections 2.5 and 2.6 of the [TASOPT Technical Desc](@ref dreladocs). Called by `cdsum!`.
"""
function wingcl(wing, Î³t, Î³s, CL, CLhtail, duo, dus, dut)

    cosL = cosd(wing.layout.sweep)

    Î·o, Î·s = wing.layout.Î·o, wing.layout.Î·s

    Kc =
        Î·o +
        0.5 * (1.0 + wing.inboard.Î») * (Î·s - Î·o) +
        0.5 * (wing.inboard.Î» + wing.outboard.Î») * (1.0 - Î·s) #surface area factor S = co*bo*K

    Ko = 1.0 / (wing.layout.AR * Kc) #root chord def'n factor

    Kp =
        Î·o + #planform loading factor
        0.5 * (1.0 + Î³s) * (Î·s - Î·o) +
        0.5 * (Î³s + Î³t) * (1.0 - Î·s) +
        wing.fuse_lift_carryover * Î·o +
        2.0 * wing.tip_lift_loss * Ko * Î³t * wing.outboard.Î»

    cl1 = (CL - CLhtail) / cosL^2 * (Kc / Kp)

    clo = cl1 / (1.0 + duo)^2
    cls = cl1 * Î³s / wing.inboard.Î» / (1.0 + dus)^2
    clt = cl1 * Î³t / wing.outboard.Î» / (1.0 + dut)^2

    return clo, cls, clt

end # wingcl

"""
   set_wing_geometry!(W,CL,qinf,wing)

Sizes wing area, span, root chord from `q`, `CL`, `W`, `AR` at given point (taken as start-of-cruise in `wsize`).

!!! details "ðŸ”ƒ Inputs and Outputs"
    **Inputs:**
    - `W::Float64`: Aircraft weight.
    - `CL::Float64`: Lift coefficient.
    - `qinf::Float64`: Freestream dynamic head.
    - `wing::TASOPT.structures.Wing`: Wing structure 

See Sections 2.5 and 3.4.1 of the [TASOPT Technical Desc](@ref dreladocs).
"""
function set_wing_geometry!(W, CL, q_inf, wing)
    wing.layout.S = W / (q_inf * CL)
    wing.layout.span = sqrt(wing.layout.S * wing.layout.AR)

    wing.layout.Î·s = max(wing.layout.Î·s, wing.layout.Î·o)

    Î·o = wing.layout.Î·o
    Î·s = wing.layout.Î·s

    Kc =
        Î·o +
        0.5 * (1.0 + wing.inboard.Î») * (Î·s - Î·o) +
        0.5 * (wing.inboard.Î» + wing.outboard.Î») * (1.0 - Î·s)

    wing.layout.root_chord = wing.layout.S / (Kc * wing.layout.span)
    wing.inboard.co = wing.layout.root_chord
    wing.outboard.co = wing.inboard.co * wing.inboard.Î»
end # wingsc


#"""
#  Sets wing area, AR, root chord 
#  to be consistent with q,CL,weight,span
#"""
#      function wingAc(W,CL,qinf,b,Î·si,bo,bs,Î»t,Î»s)
#
#      S = W/(qinf*CL)
#
#      Î·o = bo/b
#      Î·s = bs/b
#
#      Kc = Î·o +
#	 0.5*(1.0    +Î»s)*(Î·s-Î·o) +
#	 0.5*(Î»s+Î»t)*(1.0 -Î·s)
#
#      co = S/(Kc*b)
#
#      AR = b^2 / S
#
#      return  S,AR,co
#      end # wingAc
#

"""
    surfcm(b,bs,bo, sweep, Xaxis,
                       Î»t, Î»s, Î³t, Î³s,
                       AR, fLo, fLt, cmpo, cmps, cmpt)

Calculates components of wing pitching moment (``C_M``) about wing root axis:

``C_M = C_{M,0} + C_{M,1} (C_L - C_{L,surf})``

``Î”C_{m, surf} = Î”C_{m, 0} + dCâ‚˜/dCL Ã— (C_L - C_{L,h})``

!!! details "ðŸ”ƒ Inputs and Outputs"
      **Inputs:**
      - `b::Float64`: Span.
      - `bs::Float64`: Outer panel break span.
      - `bo::Float64`: Root (fuselage) span.
      - `sweep::Float64`: Sweep, degrees.
	    -	`Xaxis::Float64`: Surface axis position.
      - `Î»t::Float64`: Outer-panel chord taper ratio  ct/co.
      - `Î»s::Float64`: Inner-panel chord taper ratio  cs/co.
      - `Î³t::Float64`: Outer-panel load  taper ratio  pt/po.
      - `Î³s::Float64`: Inner-panel load  taper ratio  ps/po.
      - `AR::Float64`: Surface aspect ratio.
      - `fLo::Float64`, `fLt::Float64` : Wing root and tip load adjustment factors.
      - `cmpo::Float64`,`cmps::Float64`,`cmpt::Float64`: Perpendicular sectional lift coefficient at wing root, break ("snag"), and tip.

      **Outputs:**
      - `CM0::Float64`: Zero-lift surface pitching moment.
      - `CM1::Float64`: Surface pitching moment including lift contribution.


See Section 2.6.3 of the [TASOPT Technical Desc](@ref dreladocs).
See also [`surfcd`](@ref) and [`surfcd2`](@ref).
"""
function surfcm(b, bs, bo, sweep, Xaxis, Î»t, Î»s, Î³t, Î³s, AR, fLo, fLt, cmpo, cmps, cmpt)

    cosL = cosd(sweep)
    tanL = tand(sweep)

    Î·o = bo / b
    Î·s = bs / b

    Kc = Î·o + 0.5 * (1.0 + Î»s) * (Î·s - Î·o) + 0.5 * (Î»s + Î»t) * (1.0 - Î·s)

    Ko = 1.0 / (AR * Kc)

    Kp =
        Î·o +
        0.5 * (1.0 + Î³s) * (Î·s - Î·o) +
        0.5 * (Î³s + Î³t) * (1.0 - Î·s) +
        fLo * Î·o +
        2.0 * fLt * Ko * Î³t * Î»t

    C1 =
        (1.0 + 0.5 * (Î»s + Î³s) + Î»s * Î³s) * (Î·s - Î·o) +
        (Î»s * Î³s + 0.5 * (Î»s * Î³t + Î³s * Î»t) + Î»t * Î³t) * (1.0 - Î·s)

    C2 =
        (1.0 + 2.0 * Î³s) * (Î·s - Î·o)^2 +
        (Î³s + 2.0 * Î³t) * (1.0 - Î·s)^2 +
        3.0 * (Î³s + Î³t) * (Î·s - Î·o) * (1.0 - Î·s)

    C3 =
        (cmpo * (3.0 + 2.0 * Î»s + Î»s^2) + cmps * (3.0 * Î»s^2 + 2.0 * Î»s + 1.0)) *
        (Î·s - Î·o) +
        (
            cmps * (3.0 * Î»s^2 + 2.0 * Î»s * Î»t + Î»t^2) +
            cmpt * (3.0 * Î»t^2 + 2.0 * Î»s * Î»t + Î»s^2)
        ) * (1.0 - Î·s)

    CM1 =
        (1.0 / Kp) * (
            Î·o * (1.0 + fLo) * (Xaxis - 0.25) + (Xaxis - 0.25) * cosL^2 * C1 / 3.0 -
            (tanL / Ko) * C2 / 12.0 +
            2.0 *
            fLt *
            Î»t *
            Î³t *
            (Ko * Î»t * (Xaxis - 0.25) * cosL^2 - 0.5 * (1.0 - Î·o) * tanL)
        )

    CM0 = (cosL^4 / Kc) * C3 / 12.0


    return CM0, CM1
end # surfcm
